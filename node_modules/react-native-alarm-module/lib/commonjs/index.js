"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelAlarm = cancelAlarm;
exports.default = void 0;
exports.setAlarm = setAlarm;
exports.subscribeToOnNewIntent = subscribeToOnNewIntent;

var _reactNative = require("react-native");

var _utils = require("./utils");

const LINKING_ERROR = `The package 'react-native-alarm-module' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const AlarmModule = _reactNative.NativeModules.AlarmModule ? _reactNative.NativeModules.AlarmModule : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }

});

async function setAlarm(options) {
  if (!options) {
    throw new Error('AlarmOptions is required.');
  }

  (0, _utils.required)(options, 'taskName');
  (0, _utils.required)(options, 'timestamp');
  const {
    taskName,
    timestamp,
    type = 'setAlarmClock',
    wakeup = false,
    keepAwake = false,
    allowedInForeground = false,
    extra = ''
  } = options;
  await AlarmModule.setAlarm(taskName, timestamp.toString(), type, wakeup, keepAwake, allowedInForeground, extra);
}

async function cancelAlarm(options) {
  if (!options) {
    throw new Error('AlarmOptions is required.');
  }

  (0, _utils.required)(options, 'taskName');
  (0, _utils.required)(options, 'timestamp');
  const {
    taskName,
    timestamp
  } = options;
  await AlarmModule.cancelAlarm(taskName, timestamp.toString());
}

const alarmModuleEmitter = new _reactNative.NativeEventEmitter(AlarmModule);
/**
 * adds the handler to call when user touches alarm clock icon in status bar.
 * **ANDROID only**.
 * Don't forget to call `.remove()` on returned subscription on `componentWillUnmount` or related functions to prevent leak.
 *
 * Calls your handler with intent's arguments
 *  */

function subscribeToOnNewIntent(handler) {
  return alarmModuleEmitter.addListener('onNewIntent', handler);
}

var _default = {
  setAlarm,
  cancelAlarm,
  NativeModule: AlarmModule
};
exports.default = _default;
//# sourceMappingURL=index.js.map