interface AlarmModuleInterface {
    setAlarm(taskName: string, timestamp: string, type: string, wakeup: boolean, keepAwake: boolean, allowedInForeground: boolean, extra: string): Promise<void>;
    cancelAlarm(taskName: string, timestamp: string): Promise<void>;
}
export declare type AlarmOptions = {
    /** Task name that is registered using AppRegistry. */
    taskName: string;
    /** the number of milliseconds since the epoch of 1970-01-01T00:00:00Z */
    timestamp: number;
    /** **ANDROID:** the type of alarm. Defaults to `'setAlarmClock'`  */
    type?: 'setAlarmClock' | 'setExact' | 'setExactAndAllowWhileIdle' | 'setAndAllowWhileIdle';
    /** **ANDROID:** Should this alarm wake up device ? Uses `RTC_WAKEUP` if true, `RTC` if false */
    wakeup?: boolean;
    /** **ANDROID:** should this task acquire wake wock ? */
    keepAwake?: boolean;
    /** **ANDROID:** should this task be allowed to run in foreground ? */
    allowedInForeground?: boolean;
    /** Extra string to pass to task as `extra` prop. (can be used for passing stringified json) */
    extra?: string;
};
export declare function setAlarm(options: AlarmOptions): Promise<void>;
export declare function cancelAlarm(options: Pick<AlarmOptions, 'taskName' | 'timestamp'>): Promise<void>;
export declare type TaskArgs = {
    taskName: string;
    wakeup: boolean;
    keepAwake: boolean;
    fireDate: string;
    extra: string;
};
/**
 * adds the handler to call when user touches alarm clock icon in status bar.
 * **ANDROID only**.
 * Don't forget to call `.remove()` on returned subscription on `componentWillUnmount` or related functions to prevent leak.
 *
 * Calls your handler with intent's arguments
 *  */
export declare function subscribeToOnNewIntent(handler: (intentArgs: Record<string, unknown> | null) => void): import("react-native").EmitterSubscription;
declare const _default: {
    setAlarm: typeof setAlarm;
    cancelAlarm: typeof cancelAlarm;
    NativeModule: AlarmModuleInterface;
};
export default _default;
