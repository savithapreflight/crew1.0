"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var TimerPicker_1 = __importDefault(require("./TimerPicker"));
var Modal_1 = __importDefault(require("./Modal"));
var TimerPickerModal_styles_1 = require("./TimerPickerModal.styles");
var TimerPickerModal = (0, react_1.forwardRef)(function (_a, ref) {
    var visible = _a.visible, setIsVisible = _a.setIsVisible, onConfirm = _a.onConfirm, onCancel = _a.onCancel, onDurationChange = _a.onDurationChange, closeOnOverlayPress = _a.closeOnOverlayPress, _b = _a.initialHours, initialHours = _b === void 0 ? 0 : _b, _c = _a.initialMinutes, initialMinutes = _c === void 0 ? 0 : _c, _d = _a.initialSeconds, initialSeconds = _d === void 0 ? 0 : _d, _e = _a.hideHours, hideHours = _e === void 0 ? false : _e, _f = _a.hideMinutes, hideMinutes = _f === void 0 ? false : _f, _g = _a.hideSeconds, hideSeconds = _g === void 0 ? false : _g, hourLimit = _a.hourLimit, minuteLimit = _a.minuteLimit, secondLimit = _a.secondLimit, _h = _a.hourLabel, hourLabel = _h === void 0 ? "h" : _h, _j = _a.minuteLabel, minuteLabel = _j === void 0 ? "m" : _j, _k = _a.secondLabel, secondLabel = _k === void 0 ? "s" : _k, _l = _a.padWithNItems, padWithNItems = _l === void 0 ? 1 : _l, _m = _a.disableInfiniteScroll, disableInfiniteScroll = _m === void 0 ? false : _m, _o = _a.hideCancelButton, hideCancelButton = _o === void 0 ? false : _o, _p = _a.confirmButtonText, confirmButtonText = _p === void 0 ? "Confirm" : _p, _q = _a.cancelButtonText, cancelButtonText = _q === void 0 ? "Cancel" : _q, modalTitle = _a.modalTitle, LinearGradient = _a.LinearGradient, modalProps = _a.modalProps, containerProps = _a.containerProps, contentContainerProps = _a.contentContainerProps, pickerContainerProps = _a.pickerContainerProps, buttonContainerProps = _a.buttonContainerProps, buttonTouchableOpacityProps = _a.buttonTouchableOpacityProps, modalTitleProps = _a.modalTitleProps, pickerGradientOverlayProps = _a.pickerGradientOverlayProps, customStyles = _a.styles;
    var styles = (0, TimerPickerModal_styles_1.generateStyles)(customStyles);
    var _r = (0, react_1.useState)({
        hours: initialHours,
        minutes: initialMinutes,
        seconds: initialSeconds,
    }), selectedDuration = _r[0], setSelectedDuration = _r[1];
    var _s = (0, react_1.useState)({
        hours: initialHours,
        minutes: initialMinutes,
        seconds: initialSeconds,
    }), confirmedDuration = _s[0], setConfirmedDuration = _s[1];
    var hideModal = function () {
        setSelectedDuration({
            hours: confirmedDuration.hours,
            minutes: confirmedDuration.minutes,
            seconds: confirmedDuration.seconds,
        });
        setIsVisible(false);
    };
    var confirm = function () {
        setConfirmedDuration(selectedDuration);
        onConfirm(selectedDuration);
    };
    var cancel = function () {
        setIsVisible(false);
        setSelectedDuration(confirmedDuration);
        onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    };
    // wrapped in useCallback to avoid unnecessary re-renders of TimerPicker
    var durationChange = (0, react_1.useCallback)(function (duration) {
        setSelectedDuration(duration);
        onDurationChange === null || onDurationChange === void 0 ? void 0 : onDurationChange(duration);
    }, [onDurationChange]);
    var timerPickerRef = (0, react_1.useRef)(null);
    (0, react_1.useImperativeHandle)(ref, function () { return ({
        reset: function (options) {
            var _a;
            var initialDuration = {
                hours: initialHours,
                minutes: initialMinutes,
                seconds: initialSeconds,
            };
            setSelectedDuration(initialDuration);
            setConfirmedDuration(initialDuration);
            (_a = timerPickerRef.current) === null || _a === void 0 ? void 0 : _a.reset(options);
        },
        setValue: function (value, options) {
            var _a;
            setSelectedDuration(value);
            setConfirmedDuration(value);
            (_a = timerPickerRef.current) === null || _a === void 0 ? void 0 : _a.setValue(value, options);
        },
    }); });
    return (<Modal_1.default isVisible={visible} onOverlayPress={closeOnOverlayPress ? hideModal : undefined} {...modalProps} testID="timer-picker-modal">
                <react_native_1.View {...containerProps} style={styles.container}>
                    <react_native_1.View {...contentContainerProps} style={styles.contentContainer}>
                        {modalTitle ? (<react_native_1.Text {...modalTitleProps} style={styles.modalTitle}>
                                {modalTitle}
                            </react_native_1.Text>) : null}
                        <TimerPicker_1.default ref={timerPickerRef} onDurationChange={durationChange} initialHours={confirmedDuration.hours} initialMinutes={confirmedDuration.minutes} initialSeconds={confirmedDuration.seconds} hideHours={hideHours} hideMinutes={hideMinutes} hideSeconds={hideSeconds} hourLimit={hourLimit} minuteLimit={minuteLimit} secondLimit={secondLimit} hourLabel={hourLabel} minuteLabel={minuteLabel} secondLabel={secondLabel} padWithNItems={padWithNItems} disableInfiniteScroll={disableInfiniteScroll} LinearGradient={LinearGradient} pickerContainerProps={pickerContainerProps} pickerGradientOverlayProps={pickerGradientOverlayProps} styles={customStyles}/>
                        <react_native_1.View {...buttonContainerProps} style={styles.buttonContainer}>
                            {!hideCancelButton ? (<react_native_1.TouchableOpacity onPress={cancel} {...buttonTouchableOpacityProps}>
                                    <react_native_1.Text style={[
                styles.button,
                styles.cancelButton,
            ]}>
                                        {cancelButtonText}
                                    </react_native_1.Text>
                                </react_native_1.TouchableOpacity>) : null}
                            <react_native_1.TouchableOpacity onPress={confirm} {...buttonTouchableOpacityProps}>
                                <react_native_1.Text style={[
            styles.button,
            styles.confirmButton,
        ]}>
                                    {confirmButtonText}
                                </react_native_1.Text>
                            </react_native_1.TouchableOpacity>
                        </react_native_1.View>
                    </react_native_1.View>
                </react_native_1.View>
            </Modal_1.default>);
});
exports.default = react_1.default.memo(TimerPickerModal);
